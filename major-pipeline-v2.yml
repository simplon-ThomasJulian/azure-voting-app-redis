trigger:
- master

stages:
- stage: Build_docker_image
  displayName: Build docker image 
  jobs:

  - job: Get_Version
    displayName: Get Version Build 
    pool:
      vmImage: ubuntu-latest 
    steps:

    - task: CmdLine@2
      displayName: Comparaison version application
      inputs:
        script: |
          versionnew=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
          versionold=$(curl -s http://votingappkube.simplon-thomas.space | grep -o 'Azure Voting App v[0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/^.*v//;s/ on.*$//' | head -n1)
          echo "##vso[task.setvariable variable=verold]$versionold"
          echo "##vso[task.setvariable variable=vernew]$versionnew"
  
    - task: Docker@2
      name: CreateDocImage
      displayName: Création de l'image dockerhub
      condition: ne(variables.verold,variables.vernew)
      inputs:
        containerRegistry: 'dockerhub connection'
        repository: 'thjulian23/brief-8-tj-2'
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile'
        tags: 'latest'
      
- stage: Grype_test
  displayName: grype test
  condition: succeeded()
  jobs:
  - job: Grype_test
    displayName: Grype test
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CmdLine@2
      inputs:
        script: |
          sudo curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
    - task: CmdLine@2
      name: finalresult
      inputs:
        script: |
          sudo grype dir:/home/vsts/work/1/
          gryperesult=$(echo $?)
          echo "##vso[task.setvariable variable=gryre;isOutput=true]$gryperesult"


- stage: VerificationGrype
  displayName: Vérification manuelle Grype
  dependsOn: Grype_test
  condition: ne(dependencies.Grype_test.outputs['Grype_test.finalresult.gryre'],0)
  jobs:
  - job: Verifmanuelle
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 240 # task times out in 4 hours
      inputs:
        notifyUsers: |
          tjulian.ext@simplonformations.onmicrosoft.com
        instructions: 'Please check the problem for Grype'
        onTimeout: 'reject'

- stage: QAL_Deployment
  displayName: Qal
  dependsOn: Grype_test
  condition: eq(dependencies.Grype_test.outputs['Grype_test.finalresult.gryre'],0)
  jobs:
  - job: QAL_Deploy
    displayName: Deploy on QAL 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: KubernetesManifest@0
      name: kubeonqal
      displayName: deploy cluster on qal namespace
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'clusterconnection'
        namespace: 'qal'
        manifests: '**/kubernetes/qal/*'
    - task: Bash@3
      name: waitingfordeploy
      condition: succeeded()
      displayName: waiting for deployment
      inputs:
        targetType: 'inline'
        script: 'sleep 45'
      
    - task: Bash@3
      name: checksitefreevote
      displayName: Test de la requête pour voter free
      condition: succeeded()
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=free" http://qalvotingapp.simplon-thomas.space -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit1]$exitcode"
    - task: Bash@3
      name: checksitem6mobilevote
      displayName: Test de la requête pour voter m6mobile
      condition: eq(variables['exit1'],'200')
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=m6mobile" http://qalvotingapp.simplon-thomas.space -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit2]$exitcode"
    - task: Bash@3
      name: checksitereset
      displayName: Test de la requête pour reset
      condition: eq(variables['exit2'],'200')
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=reset" http://qalvotingapp.simplon-thomas.space -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit3]$exitcode"

    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
        
    - task: CmdLine@2
      inputs:
        script: |
          chmod -R 777 ./
          docker run --rm -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py -t http://qalvotingapp.simplon-thomas.space:80 -x report.xml
          true
      displayName: "Owasp Container Scan"
    
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $XslPath = "./xml_to_nunit.xslt" 
          $XmlInputPath = "report.xml"
          $XmlOutputPath = "test-results.xml"
          $XslTransform = New-Object System.Xml.Xsl.XslCompiledTransform
          $XslTransform.Load($XslPath)
          $XslTransform.Transform($XmlInputPath, $XmlOutputPath)
      displayName: "PowerShell Script"
    
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: './test-results.xml'
        mergeTestResults: true

        
    - task: CmdLine@2
      condition: eq(variables['exit3'],'200')
      displayName: test du temps de réponse de la requête de vote sur prod
      inputs:
        script: |
          reponseprod=$(curl -X POST -d "vote=free" http://votingappkube.simplon-thomas.space -w "%{time_total}" -o /dev/null)
          inc=0.5
          reponseprod2=$(echo "$reponseprod + $inc"|bc)
          echo "##vso[task.setvariable variable=repprod]$reponseprod2"
    - task: CmdLine@2
      condition: succeeded() 
      name: waitforreponse
      inputs:
        script: 'sleep 10'

    - task: CmdLine@2
      condition: eq(variables['exit3'],'200')
      displayName: test du temps de réponse de la requête de vote sur qal
      inputs:
        script: |
          reponseqal=$(curl -X POST -d "vote=free" http://qalvotingapp.simplon-thomas.space -w "%{time_total}" -o /dev/null)
          echo "##vso[task.setvariable variable=repqal]$reponseqal"
    - task: CmdLine@2
      name : chargetest
      displayName: Test de charge de la qal
      condition: gt(variables['repprod'],variables['repqal'])
      inputs:
        script: |
          seq 250 | parallel --max-args 0  --jobs 20 "curl -k -iF 'vote=free' http://qalvotingapp.simplon-thomas.space"
    - task: CmdLine@2
      condition: gt(variables['repprod'],variables['repqal'])
      name: waitforcharge
      inputs:
        script: 'sleep 70'

    - task: Kubernetes@1
      condition: gt(variables['repprod'],variables['repqal'])
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'clusterconnection'
        namespace: 'qal'
        command: 'get'
        useConfigurationFile: true
        configuration: './kubernetes/qal/qal_app.yml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
      name: qalpods

    - task: CmdLine@2
      condition: gt(variables['repprod'],variables['repqal'])
      name: countpod
      inputs:
        script: |
          qalappcount=$(echo $QALPODS_KUBECTLOUTPUT | jq '.items[0].spec.replicas')
          echo $qalappcount
          echo "##vso[task.setvariable variable=countpods;isOutput=true]$qalappcount"
    - task: CmdLine@2
      condition: ne(variables['countpods'],2)
      name: scalework
      inputs:
        script: echo 'Scaling worked'

    - task: Kubernetes@1
      name: deleteqal
      condition: succeeded()
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'clusterconnection'
        namespace: 'qal'
        command: 'delete'
        arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/qal/'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: Bash@3
      name: yourverygood
      condition: succeeded()
      inputs:
        targetType: 'inline'
        script: 'echo "QAL DELETION"'


- stage: 'Delete_Qal'
  condition: failed()
  dependsOn: QAL_Deployment
  displayName: Suppression de la QAL si failed
  jobs:
    - job: Delete_QAL
      displayName: Suppression de la QAL
      pool: 
        vmImage: 'ubuntu-latest'
      steps:
      - task: Kubernetes@1
        name: deleteqal
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'clusterconnection'
          namespace: 'qal'
          command: 'delete'
          arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/qal/'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Azure Container Registry'


- stage: 'Deploy_canary'
  dependsOn:
  - QAL_Deployment
  condition: gt(dependencies.QAL_Deployment.outputs['QAL_Deploy.countpod.countpods'],2)
  displayName: 'Deploy Canary Release' 
  jobs:
  - job: 'Deploy_canary' 
    displayName: 'Deployment of Canary Release' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: KubernetesManifest@0
      name: kubeonprodcanary
      condition: succeeded()
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'clusterconnection'
        namespace: 'prod'
        strategy: 'canary'
        percentage: '50'
        manifests: '**/kubernetes/canary/deployment-canary.yaml'

- stage: 'ManualIntervention'
  condition: succeeded()
  dependsOn: Deploy_canary
  displayName: 'In waiting of validation of working canary release' 
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 4320 # task times out in 3 days
      inputs:
        notifyUsers: |
          tjulian.ext@simplonformations.onmicrosoft.com
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'reject'

- stage: 'Rollback'
  dependsOn: ManualIntervention
  condition: failed()
  displayName: 'Rollback due to failed manual intervention'
  jobs:
    - job: 'DeleteCanary'
      displayName: 'Delete canary due to malfunction'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Kubernetes@1
        name: deletecanary
        displayName: deletion of canary release
        condition: succeeded()
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'clusterconnection'
          namespace: 'prod'
          command: 'delete'
          arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/canary/deletion-canary.yml'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Azure Container Registry'

- stage: 'DeployOnProd'
  dependsOn: ManualIntervention
  condition: succeeded()
  displayName: 'Deploy on Prod' 
  jobs:
  - job: 'Deployonprod' 
    displayName: 'Deploy on Prod and delete Canary' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: Kubernetes@1
      name: deleteprodapp
      displayName: replacement of production application
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'clusterconnection'
        namespace: 'prod'
        command: 'delete'
        arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/prod/deploy_app.yml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: KubernetesManifest@0
      name: kubeonprod
      displayName: deployment of production application
      condition: succeeded()
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'clusterconnection'
        namespace: 'prod'
        manifests: '**/kubernetes/prod/deploy_app.yml'
    - task: Bash@3
      name: waitingfordeploy
      inputs:
        targetType: 'inline'
        script: 'sleep 30'
    - task: Kubernetes@1
      name: deletecanary
      displayName: deletion of canary release
      condition: succeeded()
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'clusterconnection'
        namespace: 'prod'
        command: 'delete'
        arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/canary/deletion-canary.yml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: Bash@3
      name: waitingfordeployprod
      displayName: Waiting for deploy Production
      inputs:
        targetType: 'inline'
        script: 'sleep 20'
    - task: Bash@3
      name: checksiteprod
      displayName: Test de la requête pour prod
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -s -o -I -w "%{http_code}" http://votingappkube.simplon-thomas.space)
          echo "##vso[task.setvariable variable=exit5]$exitcode"
    - task: Bash@3
      name: yourverygood
      condition: eq(variables['exit5'],'200')
      inputs:
        targetType: 'inline'
        script: 'echo "GOOD JOB PIPELINE!"'