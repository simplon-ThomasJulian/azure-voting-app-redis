# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
  - task: Kubernetes@1
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'cluster-connection'
      namespace: 'prod'
      command: 'get'
      arguments: 'deployments'
    name: "kube"

  - task: CmdLine@2
    inputs:
      script: |
        versionrep=$(curl 'https://hub.docker.com/v2/repositories/thjulian23/brief-8-tj-2/tags'| jq '."results"[0]["name"]'|sed 's/^"//;s/"$//')
        versionold=$(echo $KUBE_KUBECTLOUTPUT | jq '.items[1].spec.template.spec.containers[].image' | cut -d: -f2 | sed 's/"//')
        versionnew=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
        echo "##vso[task.setvariable variable=verrep]$versionrep"
        echo "##vso[task.setvariable variable=verold]$versionold"
        echo "##vso[task.setvariable variable=vernew]$versionnew"
        sed -i 's/{{ version }}/'$versionnew'/g' kubernetes/main.yml
        sed -i 's/{{ version }}/'$versionnew'/g' kubernetes/canary/deployment-canary.yaml
        sed -i 's/{{ version }}/'$versionnew'/g' kubernetes/canary/deletion-canary.yml
        sed -i 's/{{ version }}/'$versionnew'/g' kubernetes/qal/qal_app.yml


  - task: Docker@2
    condition: ne(variables['verrep'],variables['vernew'])
    inputs:
      containerRegistry: 'dockerhub connection'
      repository: 'thjulian23/brief-8-tj-2'
      command: 'buildAndPush'
      Dockerfile: 'Dockerfile'
      tags: $(vernew)

  - task: KubernetesManifest@0
    name: kubeonqal
    displayName: 'kubeonqal'
    condition: ne(variables['verold'],variables['vernew'])
    inputs:
      action: 'deploy'
      kubernetesServiceConnection: 'cluster-connection'
      namespace: 'qal'
      manifests: '**/kubernetes/qal/*'


  - task: KubernetesManifest@0
    name: kubeonprodcanary
    condition: succeeded()
    inputs:
      action: 'deploy'
      kubernetesServiceConnection: 'cluster-connection'
      namespace: 'prod'
      strategy: 'canary'
      percentage: '50'
      manifests: '**/kubernetes/canary/deployment-canary.yaml'

  - task: Kubernetes@1
    name: deletekubeqal
    condition: and(succeeded(), ne(variables['verold'],variables['vernew']))
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'cluster-connection'
      namespace: 'qal'
      command: 'delete'
      arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/qal'
   

  - task: ManualIntervention@8
    inputs:
      instructions: 'valid or not valid?'
      emailRecipients: 'th.julian23@gmail.com'
      onTimeout: 'resume'

  - task: Kubernetes@1
    name: deletecanary
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'cluster-connection'
      namespace: 'prod'
      command: 'delete'
      arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/canary/deletion-canary.yml'


  - task: KubernetesManifest@0
    name: kubeonprod
    condition: succeeded()
    inputs:
      action: 'deploy'
      kubernetesServiceConnection: 'cluster-connection'
      namespace: 'prod'
      manifests: '**/kubernetes/main.yml'