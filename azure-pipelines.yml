# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'cluster-connection'
    namespace: 'qal'
    command: 'get'
    arguments: 'deployments'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
  name: "kube"

- task: CmdLine@2
  inputs:
    script: |
      versionrep=$(curl 'https://hub.docker.com/v2/repositories/thjulian23/brief-8-tj-2/tags'| jq '."results"[0]["name"]'|sed 's/^"//;s/"$//')
      versionold=$(echo $KUBE_KUBECTLOUTPUT | jq '.items[1].spec.template.spec.containers[].image' | cut -d: -f2 | sed 's/"//')
      versionnew=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
      echo "##vso[task.setvariable variable=verrep]$versionrep"
      echo "##vso[task.setvariable variable=verold]$versionold"
      echo "##vso[task.setvariable variable=vernew]$versionnew"
      sed -i 's/{{ version }}/'$versionnew'/g' main.yml

- task: Docker@2
  condition: ne(variables['verrep'],variables['vernew'])
  inputs:
    containerRegistry: 'dockerhub connection'
    repository: 'thjulian23/brief-8-tj-2'
    command: 'buildAndPush'
    Dockerfile: 'Dockerfile'
    tags: $(vernew)

- task: KubernetesManifest@0
  name: kubeonqal
  displayName: 'kubeonqal'
  condition: ne(variables['verold'],variables['vernew'])
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: 'cluster-connection'
    namespace: 'qal'
    manifests: 'main.yml'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'cluster-connection'
    namespace: 'qal'
    command: 'delete'
    useConfigurationFile: true
    configuration: 'main.yml'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Container Registry'
    dockerRegistryEndpoint: 'dockerhub connection'

- task: KubernetesManifest@0
  name: kubeonprod
  condition: succeeded()
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: 'cluster-connection'
    namespace: 'prod'
    manifests: 'main.yml'
